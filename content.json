[{"title":"git","date":"2017-08-11T06:57:12.000Z","path":"2017/08/11/git/","text":"Git 基础命令Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git配置Git提供了一个叫做 git config 的工具，用来配置或读取相应的工作环境变量，这些环境变量可以存放在以下三个不同的地方： etc/gitconfig 文件：系统中对所有用户都普遍使用的配置。使用 git config 时用 --system读写 ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。使用 git config 时用--global选项，读写的就是这个文件。 工作目录中的 .git/config 文件，仅对当前项目有效，每一个级别的配置都会覆盖上层的相同配置。 命令1.用户信息 12$ git config --global user.name &quot;xxx&quot;$ git config --global user.email test@163.com 2.检查已有的配置信息 git config --list```123456 ##创建仓库**git init** Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。 ```$ git init 执行完该命令会在当前目录生成.git目录， 使用指定目录为Git仓库： git init myTest```1234 初始化后，myTest目录下会出现.git目录，所有的Git需要的数据和资源都会存放在这个目录中。 如果当前目录下有几个文件想要纳入版本控制，需要先用git add命令告诉Git开始对这些文件进行跟踪，然后提交： $ git add . //当前目录所有没被忽略的文件纳入版本控制$ git add *.c // 当前目录下以.c结尾的文件$ git status -s //查看上次提交后是否修改-s简短输出$ git diff //查看执行git status的结果的详细信息$ git diff –cached //查看已缓存的改动$ git diff HEAD //查看已缓存的与未缓存的所有改动$ git diff –stat // 显示摘要而非整个diff$ git add README // 当前目录下README文件$ git commit -m ‘first commit’ // 将缓存区内容添加到仓库，first commit 提交说明1如果觉得 git add 提交缓存的流程太过繁琐，Git 允许用 -a选项跳过这一步。命令格式： $ git commit -a123**git clone**使用git clone从Git仓库中拷贝项目，克隆命令格式 $ git clone // repo:Git仓库地址$ git clone //dir本地目录1例如 $ git clone https://github.com/FX00/storeAdmin.git$ git clone https://github.com/FX00/storeAdmin.git myStore123456789101112**git resst HEAD**git reset HEAD 命令用于取消已缓存的内容。执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。**git rm**git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 &quot;取消缓存&quot;的意思就是将缓存区恢复为我们做出修改之前的样子。默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。如果你要在工作目录中留着该文件，可以使用 git rm --cached***git mv**git mv 命令用于移动或重命名一个文件、目录、软连接。##分支管理几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。创建分支命令： $ git branch (branchname) //创建分支命$ git branch //列出分支$ git checkout (branchname) //切换分支命令$ git checkout -b (branchname) //创建新分支并立即切换到该分支下$ git branch -d (branchname) //删除分支12当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容，所以多个分支不需要多个目录，合并分支的命令： $ git merge123合并冲突：合并不仅是简单的文件添加、移除的操作，git也会合并修改。可以用git add告诉Git 文件冲突已经解决##Git 查看提交历史 $ git log$ git log –oneline //简洁版本$ git log –oneline –graph //查看历史中什么时候出现了分支、合并$ git log –reverse –oneline //何时工作分叉、何时归并$ git log –author=authername //查找指定用户的提交日志12345##Git 远程仓库（Github）**SSH Key**由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：使用以下命令生成SSH Key： $ ssh-keygen -t rsa -C “youremail@example.com”12后面的 your_email@youremail.com 改为你在 github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开 id_rsa.pub，复制里面的 key。回到 github 上，进入 Account =&gt; Settings（账户配置）。左边选择 SSH and GPG keys，然后点击 New SSH key 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。输入一下命令验证是否成功： $ git -T git@github.com12**远程库** 要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下： $ git remote add [shortname] [url]1查看远程库 $ git remote$ git remote -v //加上-v可以看到每个别名的实际链接地址12提取远程仓库1.从远程仓库下载新分支和数据,执行fetch后需要执行git mergr远程分支到你所在分支 $ git fetch12.从远程仓库提取数据并尝试合并到当前分支 $ git pull1推送到远程仓库，推送你的新分支与数据到某个远端仓库命令: $ git push -u origin master1删除远程仓库 $ git remote rm [别名]```","tags":[{"name":"-git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"使用Hexo搭建个人博客","date":"2017-07-24T06:54:02.000Z","path":"2017/07/24/Hexo/","text":"###安装Hugo1.首先安装Git,Node.js 2.安装hexohexo的常用的命令 1234$ hexo g #完整命令为hexo generate,用于生成静态文件$ hexo s #完整命名为hexo server,用于启动服务器，主要用来本地预览$ hexo d #完整命令为hexo deploy,用于将本地文件发布到github上$ hexo n #完整命令为hexo new,用于新建一篇文章 鼠标右键任意地方，选择Git Bash，使用以下命令安装hexo 1$ npm install hexo-cli -g 如果之后在使用过程中，遇到以下错误 1ERROR Deployer not found : github 则运行以下命令，或者你直接先运行这个命令更好 1$ npm install hexo-deployer-git --save 接下来创建放置博客文件的文件：Hexo文件夹。（名字和位置自由选择，最好不 要放在中文目录下），如我的位置C:\\web\\Hexo，进入文件夹，鼠标右键选择 Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站 所需的所有文件 1$ hexo init 安装依赖包 1$ npm install 在C:\\web\\Hexo内执行以下命令 12$ hexo g$ hexo s 然后用浏览器访问http://localhost:4000/，此时可以看到博客，当然这个博客只 是在本地的，别人是看不到的。 ###注册Github账号 已有Github账号跳过此步，首先进入Github进行注册，用户名，邮箱和密码之后都需要用到。 ###创建repository repository相当于一个仓库，用来放置你的代码文件，首先，登陆进入Github，并进入个人页面，选择Repositories, 然后New一个repository 创建时，只需要填写Repository-name即可，当然这个名字的格式必须为你的github用户名,我的是FX00.github.io ###部署本地文件到Github 既然Repository已经创建，当然先把博客放到Github上去看看效果，编辑C:\\web\\Hexo下的_config.yml文件。 在_config.yml最下方，添加如下配置 1234deploy: type: gitrepository: http://github.com/FX00/FX00.github.io.gitbranch: master 配置好并保存后，执行以下命令部署到Github上。 12$ hexo g$ hexo d ###发表一篇文章1.在Git Bash执行命令：$ hexo new &quot;my first post&quot;2.在C:\\web\\Hexo\\source\\_post中打开my-first-post.md编辑","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]},{"title":"first","date":"2017-07-24T06:00:31.000Z","path":"2017/07/24/first/","text":"##fisrt blog ###first test","tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"Hello World","date":"2017-07-24T03:36:21.784Z","path":"2017/07/24/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]